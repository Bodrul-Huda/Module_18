// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model users {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  firstName         String             @db.VarChar(50)    
  middleName        String             @db.VarChar(50)    
  lastName          String             @db.VarChar(50)    
  mobile            String             @db.VarChar(15)
  email             String             @unique(map: "users_email_unique") @db.VarChar(50)
  passwordHash      String             @db.VarChar(32)
  registeredAt      DateTime           @default(now()) @db.Timestamp(0)
  lastLogin         DateTime           @default(now()) @db.Timestamp(0)
  intro             String            @db.TinyText
  profile           String            @db.Text
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  posts             posts[]

 
  
}


model posts {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  authorId          BigInt             @db.UnsignedBigInt()
  parendId          BigInt             @db.UnsignedBigInt()
  title             String             @db.VarChar(75)    
  metaTitle         String             @db.VarChar(100)    
  slug              String             @db.VarChar(100)   
  summary           String            @db.TinyText 
  published         Int               @db.TinyInt()
  content           String             @db.Text 
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  published_at        DateTime           @default(now()) @db.Timestamp(0)
  post_comments     post_comments[]
  post_meta         post_meta[]
  post_tag          post_tag[]
  post_category     post_category[]
  author           users             @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade) 


  
  
}

model post_comments {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  authorId          BigInt             @db.UnsignedBigInt()
  parendId          BigInt             @db.UnsignedBigInt()
  title             String             @db.VarChar(75)    
  published         Int               @db.TinyInt()
  content           String             @db.Text 
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  published_at        DateTime           @default(now()) @db.Timestamp(0)
  posts           posts             @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  
}

model category {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  parendId          BigInt             @db.UnsignedBigInt()
  title             String             @db.VarChar(75)    
  metaTitle         String             @db.VarChar(100)    
  slug              String             @db.VarChar(100)   
  content           String             @db.Text 
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  post_category     post_category[]

  
}


model tag {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  title             String             @db.VarChar(75)    
  metaTitle         String             @db.VarChar(100)    
  slug              String             @db.VarChar(100)   
  content           String             @db.Text 
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  post_tag          post_tag[]
  
}

model post_meta {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  postId            BigInt             @db.UnsignedBigInt()
  key               String             @db.VarChar(20)    
  content           String             @db.Text 
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  posts           posts             @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  
}


model post_tag {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  postId            BigInt             @db.UnsignedBigInt()
  tagId            BigInt             @db.UnsignedBigInt()
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  posts           posts             @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tag             tag             @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  
}

model post_category {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  postId            BigInt             @db.UnsignedBigInt()
  categoryId            BigInt             @db.UnsignedBigInt()
  created_at        DateTime           @default(now()) @db.Timestamp(0)
  updated_at        DateTime           @default(now()) @db.Timestamp(0)
  posts            posts             @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  category         category             @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


